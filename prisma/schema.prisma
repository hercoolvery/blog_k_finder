// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  savedKeywords SavedKeyword[]
  searches      Search[]
}

// 키워드 모델
model Keyword {
  id           String         @id @default(cuid())
  keyword      String         @unique
  searchVolume Int
  competition  Float
  cpc          Float
  difficulty   Float
  trend        Int[]
  lastUpdated  DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  saved        SavedKeyword[]
  searches     Search[]
}

// 사용자가 저장한 키워드 모델
model SavedKeyword {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keywordId String
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, keywordId])
}

// 검색 기록 모델
model Search {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  keywordId String
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// 블로그 카테고리 모델
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
